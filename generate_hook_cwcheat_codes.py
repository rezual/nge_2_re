#!/usr/bin/env python3

# Tested in PPSSPP emulator only, on hardware might run out of memory
# 
# The cheat codes generated by this script create hooks
# that hijack the memmove, strlen, and other functions.
# They instead call a look up table translation function
# that takes a target string address, and overwrites the
# a0/a1/a2 register with the translated string's address
# if it detects a known address
#
# Bugs: 
# - Some things are untranslated possibly because they don't use memmove
#

import binascii
import os

from game_app.support import *

from patches.eboot_rodata import section_rodata
from patches.eboot_data import section_data

title = 'Shinseiki Evangelion 2: Tsukurareshi Sekai - Another Cases'
serial_number = 'ULJS-00064' 

# Generate address, value pairs
cwcheat_code_list = []

# The start and stop of the rodata and data sections
GAME_DATA_BASE = 0x89B4640
GAME_DATA_TOP = 0x8A57DFC

# The game doesn't use these memory regions,
# but it might turn out it does in which case it might crash
FREE_MEM_BASE = 0x9F53900
FREE_MEM_TOP = 0x9F97400

ADDRESS_REMAP_CONTENT = {}

STRING_BUFFER_START_ADDRESS = FREE_MEM_BASE
STRING_BUFFER_ADDRESS = STRING_BUFFER_START_ADDRESS

# Convert the string buffer to CWCheats
for section in (section_data, section_rodata):
	for _, data in section.content.items():
		if data.type != DataType.String:
			continue

		# Skip yet to be translated
		if data.value == '???\0':
			continue

		if not isinstance(data.value, str):
			continue

		# Generate the Cwcheat code
		value = data.get_word_aligned_trimmed_value(size_limit=False)
	
		# Add the remap entry
		source_address = 0x08804000 + data.address
		destination_address = STRING_BUFFER_ADDRESS
		ADDRESS_REMAP_CONTENT[source_address] = destination_address

		fourths_counter = 0
		while fourths_counter < len(value):
			word_value = value[fourths_counter:fourths_counter + 4]
		
			cwcheat_formatted_address = '0x2' + format(STRING_BUFFER_ADDRESS - 0x08800000, '07x').upper()
			cwcheat_formatted_value	= '0x' + (binascii.hexlify(word_value[::-1]).upper()).decode('utf-8')

			cwcheat_code_list.append((cwcheat_formatted_address, cwcheat_formatted_value))

			fourths_counter += 4
			STRING_BUFFER_ADDRESS += 4

# Convert the address remap buffer to CWCheats
ADDRESS_REMAP_SIZE_ADDRESS = STRING_BUFFER_ADDRESS
cwcheat_formatted_address = '0x2' + format(ADDRESS_REMAP_SIZE_ADDRESS - 0x08800000, '07x').upper()
cwcheat_formatted_value	= '0x' + format(len(ADDRESS_REMAP_CONTENT), '08x').upper()
cwcheat_code_list.append((cwcheat_formatted_address, cwcheat_formatted_value))

ADDRESS_REMAP_START_ADDRESS = ADDRESS_REMAP_SIZE_ADDRESS + 4
ADDRESS_REMAP_ADDRESS = ADDRESS_REMAP_START_ADDRESS

for source_address in sorted(ADDRESS_REMAP_CONTENT.keys()):
	destination_address = ADDRESS_REMAP_CONTENT.get(source_address)
	cwcheat_formatted_address = '0x2' + format(ADDRESS_REMAP_ADDRESS - 0x08800000, '07x').upper()
	cwcheat_formatted_value	= '0x' + format(source_address, '08x').upper()

	cwcheat_code_list.append((cwcheat_formatted_address, cwcheat_formatted_value))

	ADDRESS_REMAP_ADDRESS += 4

	cwcheat_formatted_address = '0x2' + format(ADDRESS_REMAP_ADDRESS - 0x08800000, '07x').upper()
	cwcheat_formatted_value	= '0x' + format(destination_address, '08x').upper()

	cwcheat_code_list.append((cwcheat_formatted_address, cwcheat_formatted_value))

	ADDRESS_REMAP_ADDRESS += 4

# Add the code
def cwcheat(address, value):
	cwcheat_formatted_address = '0x2' + format(address - 0x08800000, '07x').upper()
	cwcheat_formatted_value	= '0x' + format(value, '08x').upper()

	cwcheat_code_list.append((cwcheat_formatted_address, cwcheat_formatted_value))

# Address remap
LOOKUP_START_ADDRESS = ADDRESS_REMAP_ADDRESS
LOOKUP_ADDRESS = LOOKUP_START_ADDRESS

cwcheat(LOOKUP_ADDRESS, 0x27BDFFEC); LOOKUP_ADDRESS +=4 # addiu sp,sp,-0x14
cwcheat(LOOKUP_ADDRESS, 0xAFBF0000); LOOKUP_ADDRESS +=4 # sw ra, 0x0(sp)
cwcheat(LOOKUP_ADDRESS, 0xAFA80004); LOOKUP_ADDRESS +=4 # sw t0, 0x4(sp)
cwcheat(LOOKUP_ADDRESS, 0xAFA90008); LOOKUP_ADDRESS +=4 # sw t1, 0x8(sp)
cwcheat(LOOKUP_ADDRESS, 0xAFAA000C); LOOKUP_ADDRESS +=4 # sw t2, 0xC(sp)
cwcheat(LOOKUP_ADDRESS, 0xAFAB0010); LOOKUP_ADDRESS +=4 # sw t3, 0x10(sp)

cwcheat(LOOKUP_ADDRESS, 0x3C0A0000 | (GAME_DATA_BASE >> 16)); LOOKUP_ADDRESS +=4 # lui t2, GAME_DATA_BASE.hi
cwcheat(LOOKUP_ADDRESS, 0x354A0000 | (GAME_DATA_BASE & 0xFFFF)); LOOKUP_ADDRESS +=4 # ori t2, t2, GAME_DATA_BASE.lo
cwcheat(LOOKUP_ADDRESS, 0x008A582A); LOOKUP_ADDRESS +=4 # slt t3, a0, t2
cwcheat(LOOKUP_ADDRESS, 0x15600013); LOOKUP_ADDRESS +=4 # bne t3, zero, exit_loop

cwcheat(LOOKUP_ADDRESS, 0x3C0A0000 | (GAME_DATA_TOP >> 16)); LOOKUP_ADDRESS +=4 # lui t2, GAME_DATA_TOP.hi
cwcheat(LOOKUP_ADDRESS, 0x354A0000 | (GAME_DATA_TOP & 0xFFFF)); LOOKUP_ADDRESS +=4 # ori t2, t2, GAME_DATA_TOP.lo
cwcheat(LOOKUP_ADDRESS, 0x0144582A); LOOKUP_ADDRESS +=4 # slt t3, t2, a0
cwcheat(LOOKUP_ADDRESS, 0x1560000F); LOOKUP_ADDRESS +=4 # bne t3, zero, exit_loop

cwcheat(LOOKUP_ADDRESS, 0x3C080000 | (ADDRESS_REMAP_SIZE_ADDRESS >> 16)); LOOKUP_ADDRESS +=4 # lui t0, ADDRESS_REMAP_SIZE_ADDRESS.hi
cwcheat(LOOKUP_ADDRESS, 0x35080000 | (ADDRESS_REMAP_SIZE_ADDRESS & 0xFFFF)); LOOKUP_ADDRESS +=4 # ori t0, ADDRESS_REMAP_SIZE_ADDRESS.lo
cwcheat(LOOKUP_ADDRESS, 0x8D080000); LOOKUP_ADDRESS +=4 # lw t0, 0(t0)
cwcheat(LOOKUP_ADDRESS, 0x3C090000 | (ADDRESS_REMAP_START_ADDRESS >> 16)); LOOKUP_ADDRESS +=4 # lui t1, ADDRESS_REMAP_START_ADDRESS.hi
cwcheat(LOOKUP_ADDRESS, 0x35290000 | (ADDRESS_REMAP_START_ADDRESS & 0xFFFF)); LOOKUP_ADDRESS +=4 # ori t1, ADDRESS_REMAP_START_ADDRESS.lo
cwcheat(LOOKUP_ADDRESS, 0x11000009); LOOKUP_ADDRESS +=4 # beq t0, zero, exit_loop (LABEL: loop)
cwcheat(LOOKUP_ADDRESS, 0x25290008); LOOKUP_ADDRESS +=4 # addiu t1, t1, 8
cwcheat(LOOKUP_ADDRESS, 0x8D2AFFF8); LOOKUP_ADDRESS +=4 # lw t2, -0x8(t1)
cwcheat(LOOKUP_ADDRESS, 0x0144582A); LOOKUP_ADDRESS +=4 # slt t3, t2, a0
cwcheat(LOOKUP_ADDRESS, 0x1560FFFB); LOOKUP_ADDRESS +=4 # bne t3, zero, loop
cwcheat(LOOKUP_ADDRESS, 0x2508FFFF); LOOKUP_ADDRESS +=4 # addiu t0, t0, -1
cwcheat(LOOKUP_ADDRESS, 0x008A582A); LOOKUP_ADDRESS +=4 # slt t3, a0, t2
cwcheat(LOOKUP_ADDRESS, 0x15600002); LOOKUP_ADDRESS +=4 # bne t3, zero, exit_loop
cwcheat(LOOKUP_ADDRESS, 0x00000000); LOOKUP_ADDRESS +=4 # nop
cwcheat(LOOKUP_ADDRESS, 0x8D24FFFC); LOOKUP_ADDRESS +=4 # lw a0, -0x4(t1)
cwcheat(LOOKUP_ADDRESS, 0x8FBF0000); LOOKUP_ADDRESS +=4 # lw ra, 0x0(sp) (LABEL: exit_loop)
cwcheat(LOOKUP_ADDRESS, 0x8FA80004); LOOKUP_ADDRESS +=4 # lw t0, 0x4(sp)
cwcheat(LOOKUP_ADDRESS, 0x8FA90008); LOOKUP_ADDRESS +=4 # lw t1, 0x8(sp)
cwcheat(LOOKUP_ADDRESS, 0x8FAA000C); LOOKUP_ADDRESS +=4 # lw t2, 0xC(sp)
cwcheat(LOOKUP_ADDRESS, 0x8FAB0010); LOOKUP_ADDRESS +=4 # lw t3, 0x10(sp)
cwcheat(LOOKUP_ADDRESS, 0x03E00008); LOOKUP_ADDRESS +=4 # jr ra
cwcheat(LOOKUP_ADDRESS, 0x27BD0014); LOOKUP_ADDRESS +=4 # addiu sp,sp,0x14

LOOKUP_ARG1_START_ADDRESS = LOOKUP_ADDRESS
LOOKUP_ARG1_ADDRESS = LOOKUP_ARG1_START_ADDRESS

cwcheat(LOOKUP_ARG1_ADDRESS, 0x27BDFFF8); LOOKUP_ARG1_ADDRESS += 4 # addiu sp,sp,-0x8
cwcheat(LOOKUP_ARG1_ADDRESS, 0xAFBF0000); LOOKUP_ARG1_ADDRESS += 4 # sw ra, 0x0(sp)
cwcheat(LOOKUP_ARG1_ADDRESS, 0xAFA40004); LOOKUP_ARG1_ADDRESS += 4 # sw a0, 0x4(sp)
cwcheat(LOOKUP_ARG1_ADDRESS, 0x0C000000 | ((LOOKUP_START_ADDRESS & 0x0FFFFFFF) >> 2)); LOOKUP_ARG1_ADDRESS += 4 # jal LOOKUP_START_ADDRESS
cwcheat(LOOKUP_ARG1_ADDRESS, 0x00A02021); LOOKUP_ARG1_ADDRESS += 4 # move a0, a1
cwcheat(LOOKUP_ARG1_ADDRESS, 0x00802821); LOOKUP_ARG1_ADDRESS += 4 # move a1, a0
cwcheat(LOOKUP_ARG1_ADDRESS, 0x8FBF0000); LOOKUP_ARG1_ADDRESS += 4 # lw ra, 0x0(sp)
cwcheat(LOOKUP_ARG1_ADDRESS, 0x8FA40004); LOOKUP_ARG1_ADDRESS += 4 # lw a0, 0x4(sp)
cwcheat(LOOKUP_ARG1_ADDRESS, 0x03E00008); LOOKUP_ARG1_ADDRESS += 4 # jr ra
cwcheat(LOOKUP_ARG1_ADDRESS, 0x27BD0008); LOOKUP_ARG1_ADDRESS += 4 # addiu sp,sp,0x8

LOOKUP_ARG2_START_ADDRESS = LOOKUP_ARG1_ADDRESS
LOOKUP_ARG2_ADDRESS = LOOKUP_ARG2_START_ADDRESS

cwcheat(LOOKUP_ARG2_ADDRESS, 0x27BDFFF8); LOOKUP_ARG2_ADDRESS += 4 # addiu sp,sp,-0x8
cwcheat(LOOKUP_ARG2_ADDRESS, 0xAFBF0000); LOOKUP_ARG2_ADDRESS += 4 # sw ra, 0x0(sp)
cwcheat(LOOKUP_ARG2_ADDRESS, 0xAFA40004); LOOKUP_ARG2_ADDRESS += 4 # sw a0, 0x4(sp)
cwcheat(LOOKUP_ARG2_ADDRESS, 0x0C000000 | ((LOOKUP_START_ADDRESS & 0x0FFFFFFF) >> 2)); LOOKUP_ARG2_ADDRESS += 4 # jal LOOKUP_START_ADDRESS
cwcheat(LOOKUP_ARG2_ADDRESS, 0x00C02021); LOOKUP_ARG2_ADDRESS += 4 # move a0, a2
cwcheat(LOOKUP_ARG2_ADDRESS, 0x00803021); LOOKUP_ARG2_ADDRESS += 4 # move a2, a0
cwcheat(LOOKUP_ARG2_ADDRESS, 0x8FBF0000); LOOKUP_ARG2_ADDRESS += 4 # lw ra, 0x0(sp)
cwcheat(LOOKUP_ARG2_ADDRESS, 0x8FA40004); LOOKUP_ARG2_ADDRESS += 4 # lw a0, 0x4(sp)
cwcheat(LOOKUP_ARG2_ADDRESS, 0x03E00008); LOOKUP_ARG2_ADDRESS += 4 # jr ra
cwcheat(LOOKUP_ARG2_ADDRESS, 0x27BD0008); LOOKUP_ARG2_ADDRESS += 4 # addiu sp,sp,0x8

# Strlen
NEW_STRLEN_START_ADDRESS = LOOKUP_ARG2_ADDRESS
NEW_STRLEN_ADDRESS = NEW_STRLEN_START_ADDRESS

cwcheat(NEW_STRLEN_ADDRESS, 0x27BDFFFC); NEW_STRLEN_ADDRESS += 4 # addiu sp,sp,-0x4
cwcheat(NEW_STRLEN_ADDRESS, 0xAFBF0000); NEW_STRLEN_ADDRESS += 4 # sw ra, 0x0(sp)
cwcheat(NEW_STRLEN_ADDRESS, 0x0C000000 | ((LOOKUP_START_ADDRESS & 0x0FFFFFFF) >> 2)); NEW_STRLEN_ADDRESS += 4 # jal LOOKUP_START_ADDRESS
cwcheat(NEW_STRLEN_ADDRESS, 0x00000000); NEW_STRLEN_ADDRESS += 4 # nop
cwcheat(NEW_STRLEN_ADDRESS, 0x24820001); NEW_STRLEN_ADDRESS += 4 # addiu v0, a0, 0x1 # (overwritten)
cwcheat(NEW_STRLEN_ADDRESS, 0x90830000); NEW_STRLEN_ADDRESS += 4 # lbu v1,0x0(a0) (LABEL: read_byte) # (overwritten)
cwcheat(NEW_STRLEN_ADDRESS, 0x1460FFFE); NEW_STRLEN_ADDRESS += 4 # bne v1, zero, read_byte # (overwritten)
cwcheat(NEW_STRLEN_ADDRESS, 0x24840001); NEW_STRLEN_ADDRESS += 4 # addiu a0, a0, 0x1 # (overwritten)
cwcheat(NEW_STRLEN_ADDRESS, 0x8FBF0000); NEW_STRLEN_ADDRESS += 4 # lw ra, 0x0(sp)
cwcheat(NEW_STRLEN_ADDRESS, 0x27BD0004); NEW_STRLEN_ADDRESS += 4 # addiu sp,sp,0x4
cwcheat(NEW_STRLEN_ADDRESS, 0x03E00008); NEW_STRLEN_ADDRESS += 4 # jr ra # (overwritten)
cwcheat(NEW_STRLEN_ADDRESS, 0x00821023); NEW_STRLEN_ADDRESS += 4 # subu	v0,a0,v0 # (overwritten)

cwcheat(0x089A63D8, 0x08000000 | ((NEW_STRLEN_START_ADDRESS & 0x0FFFFFFF) >> 2)); NEW_STRLEN_ADDRESS += 4 # strlen: j NEW_STRLEN_START_ADDRESS
cwcheat(0x089A63DC, 0x00000000); NEW_STRLEN_ADDRESS += 4 # nop

# Memmove
NEW_MEMMOVE_START_ADDRESS = NEW_STRLEN_ADDRESS
NEW_MEMMOVE_ADDRESS = NEW_MEMMOVE_START_ADDRESS

cwcheat(NEW_MEMMOVE_ADDRESS, 0x27BDFFFC); NEW_MEMMOVE_ADDRESS += 4 # addiu sp,sp,-0x4
cwcheat(NEW_MEMMOVE_ADDRESS, 0xAFBF0000); NEW_MEMMOVE_ADDRESS += 4 # sw ra, 0x0(sp)
cwcheat(NEW_MEMMOVE_ADDRESS, 0x0C000000 | ((LOOKUP_ARG1_START_ADDRESS & 0x0FFFFFFF) >> 2)); NEW_MEMMOVE_ADDRESS += 4 # memmove: jal LOOKUP_ARG1_START_ADDRESS
cwcheat(NEW_MEMMOVE_ADDRESS, 0x00000000); NEW_MEMMOVE_ADDRESS += 4 # nop
cwcheat(NEW_MEMMOVE_ADDRESS, 0x8FBF0000); NEW_MEMMOVE_ADDRESS += 4 # lw ra, 0x0(sp)
cwcheat(NEW_MEMMOVE_ADDRESS, 0x27BD0004); NEW_MEMMOVE_ADDRESS += 4 # addiu sp,sp,0x4
cwcheat(NEW_MEMMOVE_ADDRESS, 0x0A26B67B); NEW_MEMMOVE_ADDRESS += 4 # j 0x089AD9EC
cwcheat(NEW_MEMMOVE_ADDRESS, 0x00000000); NEW_MEMMOVE_ADDRESS += 4 # nop

cwcheat(0x089AD9EC, 0x00A4102B) # sltu v0,a1,a0
cwcheat(0x089AD9F0, 0x1040005E) # beq v0,zero,pos_089ADB6C
cwcheat(0x089AD9F4, 0x00805021) # move t2,a0
cwcheat(0x089AD9F8, 0x0A26B683) # j	pos_089ADA0C
cwcheat(0x089AD9FC, 0x00000000) # nop

cwcheat(0x089ADA00, 0x08000000 | ((NEW_MEMMOVE_START_ADDRESS & 0x0FFFFFFF) >> 2)) # memmove: j NEW_MEMMOVE_START_ADDRESS
cwcheat(0x089ADA04, 0x00000000) # nop
cwcheat(0x089ADA08, 0x00000000) # nop

# Custom functions that handle strings
NEW_089A7AA8_START_ADDRESS = NEW_MEMMOVE_ADDRESS
NEW_089A7AA8_ADDRESS = NEW_089A7AA8_START_ADDRESS

cwcheat(NEW_089A7AA8_ADDRESS, 0x27BDFFFC); NEW_089A7AA8_ADDRESS += 4 # addiu sp,sp,-0x4
cwcheat(NEW_089A7AA8_ADDRESS, 0xAFBF0000); NEW_089A7AA8_ADDRESS += 4 # sw ra, 0x0(sp)
cwcheat(NEW_089A7AA8_ADDRESS, 0x0C000000 | ((LOOKUP_ARG2_START_ADDRESS & 0x0FFFFFFF) >> 2)); NEW_089A7AA8_ADDRESS += 4 # memmove: jal LOOKUP_ARG2_START_ADDRESS
cwcheat(NEW_089A7AA8_ADDRESS, 0x00000000); NEW_089A7AA8_ADDRESS += 4 # nop
cwcheat(NEW_089A7AA8_ADDRESS, 0x8FBF0000); NEW_089A7AA8_ADDRESS += 4 # lw ra, 0x0(sp)
cwcheat(NEW_089A7AA8_ADDRESS, 0x27BD0004); NEW_089A7AA8_ADDRESS += 4 # addiu sp,sp,0x4
cwcheat(NEW_089A7AA8_ADDRESS, 0x27BDFD70); NEW_089A7AA8_ADDRESS += 4 # addiu sp, sp, -0x290 # overwritten
cwcheat(NEW_089A7AA8_ADDRESS, 0xAFB00260); NEW_089A7AA8_ADDRESS += 4 # sw s0, 0x260(sp) # overwritten
cwcheat(NEW_089A7AA8_ADDRESS, 0x0A269EAC); NEW_089A7AA8_ADDRESS += 4 # j 0x089A7AB0
cwcheat(NEW_089A7AA8_ADDRESS, 0x00000000); NEW_089A7AA8_ADDRESS += 4 # nop

cwcheat(0x089A7AA8, 0x08000000 | ((NEW_089A7AA8_START_ADDRESS & 0x0FFFFFFF) >> 2)) # memmove: j NEW_089A7AA8_START_ADDRESS
cwcheat(0x089A7AAC, 0x00000000) # nop

# Half-width patch
NEW_HALFWIDTH_START_ADDRESS = NEW_089A7AA8_ADDRESS
NEW_HALFWIDTH_ADDRESS = NEW_HALFWIDTH_START_ADDRESS

cwcheat(NEW_HALFWIDTH_ADDRESS, 0x026B5021); NEW_HALFWIDTH_ADDRESS += 4 # addu t2,s3,t3 # overwritten
cwcheat(NEW_HALFWIDTH_ADDRESS, 0x000A9843); NEW_HALFWIDTH_ADDRESS += 4 # sra s3,t2,0x1 # overwritten

cwcheat(NEW_HALFWIDTH_ADDRESS, 0x2E460080); NEW_HALFWIDTH_ADDRESS += 4 # sltiu a2,s2,0x80
cwcheat(NEW_HALFWIDTH_ADDRESS, 0x1240000D); NEW_HALFWIDTH_ADDRESS += 4 # beq s2, zero, EIGHT

cwcheat(NEW_HALFWIDTH_ADDRESS, 0x34060069); NEW_HALFWIDTH_ADDRESS += 4 # li a2, 0x69 # i
cwcheat(NEW_HALFWIDTH_ADDRESS, 0x12460009); NEW_HALFWIDTH_ADDRESS += 4 # beq s2, a2, FOUR
cwcheat(NEW_HALFWIDTH_ADDRESS, 0x3406006A); NEW_HALFWIDTH_ADDRESS += 4 # li a2, 0x6A # j
cwcheat(NEW_HALFWIDTH_ADDRESS, 0x12460007); NEW_HALFWIDTH_ADDRESS += 4 # beq s2, a2, FOUR
cwcheat(NEW_HALFWIDTH_ADDRESS, 0x3406006C); NEW_HALFWIDTH_ADDRESS += 4 # li a2, 0x6C # l
cwcheat(NEW_HALFWIDTH_ADDRESS, 0x12460005); NEW_HALFWIDTH_ADDRESS += 4 # beq s2, a2, FOUR
cwcheat(NEW_HALFWIDTH_ADDRESS, 0x34060072); NEW_HALFWIDTH_ADDRESS += 4 # li a2, 0x72 # r
cwcheat(NEW_HALFWIDTH_ADDRESS, 0x12460003); NEW_HALFWIDTH_ADDRESS += 4 # beq s2, a2, FOUR
cwcheat(NEW_HALFWIDTH_ADDRESS, 0x34060027); NEW_HALFWIDTH_ADDRESS += 4 # li a2, 0x27 # '
cwcheat(NEW_HALFWIDTH_ADDRESS, 0x12460001); NEW_HALFWIDTH_ADDRESS += 4 # beq s2, a2, FOUR
cwcheat(NEW_HALFWIDTH_ADDRESS, 0x00000000); NEW_HALFWIDTH_ADDRESS += 4 # nop

cwcheat(NEW_HALFWIDTH_ADDRESS, 0x10000001); NEW_HALFWIDTH_ADDRESS += 4 # b DONE (LABEL: FOUR)
cwcheat(NEW_HALFWIDTH_ADDRESS, 0x34130004); NEW_HALFWIDTH_ADDRESS += 4 # li s3, 0x04

cwcheat(NEW_HALFWIDTH_ADDRESS, 0x34130008); NEW_HALFWIDTH_ADDRESS += 4 # li s3, 0x08 (LABEL: EIGHT)

cwcheat(NEW_HALFWIDTH_ADDRESS, 0x0A21CFE8); NEW_HALFWIDTH_ADDRESS += 4 # j 0x08873F9C # (LABEL: DONE)
cwcheat(NEW_HALFWIDTH_ADDRESS, 0x00000000); NEW_HALFWIDTH_ADDRESS += 4 # nop

cwcheat(0x08873F98, 0x08000000 | ((NEW_HALFWIDTH_START_ADDRESS & 0x0FFFFFFF) >> 2)) # j NEW_HALFWIDTH_START_ADDRESS
cwcheat(0x08873F9C, 0x00000000) # nop

# Cwcheat has a limit of how many lines per cheat, so bucket them
print('_S ' + serial_number)
print('_G ' + title)

cheat_group = 1
cheat_number = 0
for (address, value) in cwcheat_code_list:

	if cheat_number == 0:
		print('_C1 Translate %s' % cheat_group)

	print('_L ' + address + ' ' + value)

	cheat_number += 1
	if cheat_number >= 30:
		cheat_number = 0
		cheat_group += 1
